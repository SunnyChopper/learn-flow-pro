service: learnflow-pro
frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  environment:
    REACT_APP_OPENAI_API_KEY: ${env:REACT_APP_OPENAI_API_KEY}
    REACT_APP_IDENTITY_POOL_ID: ${env:REACT_APP_IDENTITY_POOL_ID}
    REACT_APP_USER_POOL_REGION: ${env:REACT_APP_USER_POOL_REGION}
    REACT_APP_USER_POOL_ID: ${env:REACT_APP_USER_POOL_ID}
    REACT_APP_USER_POOL_CLIENT_ID: ${env:REACT_APP_USER_POOL_CLIENT_ID}
    REACT_APP_API_BASE_URL: ${env:REACT_APP_API_BASE_URL}
    REACT_APP_MEDIUM_API_KEY: ${env:REACT_APP_MEDIUM_API_KEY}
  #   REACT_APP_DB_HOST:
  #     'Fn::ImportValue': REACT_APP_DB_HOST
  #   REACT_APP_DB_PORT:
  #     'Fn::ImportValue': REACT_APP_DB_PORT
  #   REACT_APP_DB_NAME:
  #     'Fn::ImportValue': REACT_APP_DB_NAME
  #   REACT_APP_DB_USERNAME:
  #     'Fn::ImportValue': REACT_APP_DB_USERNAME
  #   REACT_APP_DB_PASSWORD:
  #     'Fn::ImportValue': REACT_APP_DB_PASSWORD
    
# you can add statements to the Lambda function's IAM Role here
#  iam:
#    role:
#      statements:
#        - Effect: "Allow"
#          Action:
#            - "s3:ListBucket"
#          Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#        - Effect: "Allow"
#          Action:
#            - "s3:PutObject"
#          Resource:
#            Fn::Join:
#              - ""
#              - - "arn:aws:s3:::"
#                - "Ref" : "ServerlessDeploymentBucket"
#                - "/*"

layers:
  shared:
    path: src/nodejs
    name: learnflow-pro-shared
    description: Shared services layer for LearnFlow Pro
    compatibleRuntimes:
      - nodejs18.x
    retain: false

plugins:
  - serverless-dotenv-plugin
  - serverless-offline
  - serverless-esbuild

package:
  individually: true
  excludeDevDependencies: true
  include:
    - src/**
    - src/nodejs/node_modules/services/*
    - src/nodejs/node_modules/services/**/*

resources:
  Resources:
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: learnflow-pro-userpool
        MfaConfiguration: OFF
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: true
            RequireNumbers: true
            RequireSymbols: false
            RequireUppercase: true
    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: learnflow-pro-userpool-client
        GenerateSecret: False
        UserPoolId:
          Ref: CognitoUserPool
    CognitoIdentityPool:
      Type: AWS::Cognito::IdentityPool
      Properties:
        IdentityPoolName: learnflow-pro-identitypool
        AllowUnauthenticatedIdentities: false
        CognitoIdentityProviders:
          - ClientId:
              Ref: CognitoUserPoolClient
            ProviderName:
              Fn::GetAtt:
                - CognitoUserPool
                - ProviderName
    CognitoIdentityPoolRoles:
      Type: AWS::Cognito::IdentityPoolRoleAttachment
      Properties:
        IdentityPoolId:
          Ref: CognitoIdentityPool
        Roles:
          authenticated:
            Fn::GetAtt:
              - CognitoAuthRole
              - Arn
    CognitoAuthRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Federated: cognito-identity.amazonaws.com
              Action:
                - sts:AssumeRoleWithWebIdentity
              Condition:
                StringEquals:
                  "cognito-identity.amazonaws.com:aud":
                    Ref: CognitoIdentityPool
                ForAnyValue:StringLike:
                  "cognito-identity.amazonaws.com:amr": authenticated
    LambdaExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service: lambda.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: LambdaCloudWatchAccessPolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: "arn:aws:logs:*:*:*"
    UserDataTable:
      Type: AWS::RDS::DBInstance
      Properties:
        DBName: learnflow_pro
        AllocatedStorage: 20
        DBInstanceClass: db.t3.micro
        Engine: MySQL
        EngineVersion: "5.7"
        MasterUsername: admin         # replace later
        MasterUserPassword: admin123  # replace later
        PubliclyAccessible: true
        StorageType: gp2
        MultiAZ: false
    ApiGatewayAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: learnflow-pro-authorizermethod.request.header.Authorization
        IdentitySource: method.request.header.Authorization
        RestApiId:
          Ref: ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - Fn::GetAtt:
              - CognitoUserPool
              - Arn

functions:
  # --- Auth --- #
  preSignUp:
    handler: src/handlers/Auth.preSignUpHandler
    events:
      - cognitoUserPool:
          pool: CognitoUserPool
          trigger: PreSignUp

  # --- Learning Sessions --- #
  getRecommendations:
    handler: src/handlers/Recommendations.getRecommendationsHandler
    layers:
      - !Ref SharedLambdaLayer
    events:
      - http:
          path: /api/recommendations
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  generateTopicRecommendations:
    handler: src/handlers/Recommendations.generateTopicRecommendationsHandler
    layers:
      - !Ref SharedLambdaLayer
    events:
      - http:
          path: /api/recommendations/topics
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  getLearningSession:
    handler: src/handlers/Sessions.getSessionHandler
    layers:
      - !Ref SharedLambdaLayer
    events:
      - http:
          path: /api/sessions
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
            claims:
              - email
              - sub
  getUserLearningSessions:
    handler: src/handlers/Sessions.getUserSessionsHandler
    layers:
      - !Ref SharedLambdaLayer
    events:
      - http:
          path: /api/user/sessions
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
            claims:
              - email
              - sub
  createLearningSession:
    handler: src/handlers/Sessions.createSessionHandler
    layers:
      - !Ref SharedLambdaLayer
    events:
      - http:
          path: /api/sessions
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
            claims:
              - email
              - sub
  getArticlesForLearningSession:
    handler: src/handlers/Articles.getArticlesHandler
    layers:
      - !Ref SharedLambdaLayer
    events:
      - http:
          path: /api/articles
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
            claims:
              - email
              - sub
  getNotesForArticle:
    handler: src/handlers/Articles.getNotesForArticleHandler
    layers:
      - !Ref SharedLambdaLayer
    events:
      - http:
          path: /api/articles/notes
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  getNotesForLearningSession:
    handler: src/handlers/Sessions.getNotesForLearningSessionHandler
    layers:
      - !Ref SharedLambdaLayer
    events:
      - http:
          path: /api/sessions/notes
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  createArticleForLearningSession:
    handler: src/handlers/Articles.createArticleHandler
    layers:
      - !Ref SharedLambdaLayer
    events:
      - http:
          path: /api/articles
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
            claims:
              - email
              - sub
  sortArticlesForLearningSession:
    handler: src/handlers/Articles.sortArticlesHandler
    layers:
      - !Ref SharedLambdaLayer
    events:
      - http:
          path: /api/sessions/sort
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
            claims:
              - email
              - sub
  generateNotesForArticle:
    handler: src/handlers/Articles.generateNotesHandler
    layers:
      - !Ref SharedLambdaLayer
    events:
      - http:
          path: /api/articles/notes
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  getGoals:
    handler: src/handlers/Goals.getGoalsHandler
    layers:
      - !Ref SharedLambdaLayer
    events:
      - http:
          path: /api/goals
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
            claims:
              - email
              - sub
  createGoal:
    handler: src/handlers/Goals.createGoalHandler
    layers:
      - !Ref SharedLambdaLayer
    events:
      - http:
          path: /api/goals
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
            claims:
              - email
              - sub
  getUserKnowledgeBases:
    handler: src/handlers/KnowledgeBases.getUserKnowledgeBasesHandler
    layers:
      - !Ref SharedLambdaLayer
    events:
      - http:
          path: /api/user/knowledge-bases
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  getKnowledgeBase:
    handler: src/handlers/KnowledgeBases.getKnowledgeBaseHandler
    layers:
      - !Ref SharedLambdaLayer
    events:
      - http:
          path: /api/knowledge-bases
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  getArticlesForKnowledgeBase:
    handler: src/handlers/KnowledgeBases.getArticlesForKnowledgeBaseHandler
    layers:
      - !Ref SharedLambdaLayer
    events:
      - http:
          path: /api/knowledge-bases/articles
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  createKnowledgeBase:
    handler: src/handlers/KnowledgeBases.createKnowledgeBaseHandler
    layers:
      - !Ref SharedLambdaLayer
    events:
      - http:
          path: /api/knowledge-bases
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  createKnowledgeBaseEntry:
    handler: src/handlers/KnowledgeBases.createKnowledgeBaseEntryHandler
    layers:
      - !Ref SharedLambdaLayer
    events:
      - http:
          path: /api/knowledge-bases/entries
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

useDotenv: true
custom:
  dotenv:
    include:
      - REACT_APP_OPENAI_API_KEY
      - REACT_APP_IDENTITY_POOL_ID
      - REACT_APP_USER_POOL_REGION
      - REACT_APP_USER_POOL_ID
      - REACT_APP_USER_POOL_CLIENT_ID
      - REACT_APP_API_BASE_URL
      - REACT_APP_MEDIUM_API_KEY