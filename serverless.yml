service: learnflow-pro
frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  timeout: 30
  environment:
    REACT_APP_OPENAI_API_KEY: ${env:REACT_APP_OPENAI_API_KEY}
    REACT_APP_IDENTITY_POOL_ID: ${env:REACT_APP_IDENTITY_POOL_ID}
    REACT_APP_USER_POOL_REGION: ${env:REACT_APP_USER_POOL_REGION}
    REACT_APP_USER_POOL_ID: ${env:REACT_APP_USER_POOL_ID}
    REACT_APP_USER_POOL_CLIENT_ID: ${env:REACT_APP_USER_POOL_CLIENT_ID}
    REACT_APP_API_BASE_URL: ${env:REACT_APP_API_BASE_URL}
    REACT_APP_ALLOWED_ORIGINS: ${env:REACT_APP_ALLOWED_ORIGINS}
    REACT_APP_DB_HOST: ${env:REACT_APP_DB_HOST}
    REACT_APP_DB_PORT: ${env:REACT_APP_DB_PORT}
    REACT_APP_DB_NAME: ${env:REACT_APP_DB_NAME}
    REACT_APP_DB_USERNAME: ${env:REACT_APP_DB_USERNAME}
    REACT_APP_DB_PASSWORD: ${env:REACT_APP_DB_PASSWORD}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - s3:*
          Resource: "arn:aws:s3:::*"
        - Effect: Allow
          Action:
            - apigateway:*
          Resource: "arn:aws:apigateway:*::/*"
        - Effect: "Allow"
          Action:
            - "lambda:InvokeFunction"
          Resource: "*"
        - Effect: "Allow"
          Action:
            - "dynamodb:DescribeTable"
            - "dynamodb:Query"
            - "dynamodb:Scan"
            - "dynamodb:GetItem"
            - "dynamodb:PutItem"
            - "dynamodb:UpdateItem"
            - "dynamodb:DeleteItem"
          Resource: "*"
        - Effect: "Allow"
          Action:
            - "cognito-idp:DeleteUserPool"
            - "cognito-idp:DeleteUserPoolClient"
            - "cognito-idp:DescribeUserPool"
            - "cognito-idp:DescribeUserPoolClient"
            - "cognito-idp:UpdateUserPool"
            - "cognito-idp:UpdateUserPoolClient"
            - "cognito-idp:ListUserPoolClients"
            - "cognito-idp:ListUserPools"
            - "cognito-idp:ListUsers"
            - "cognito-idp:ListGroups"
            - "cognito-idp:ListIdentityProviders"
            - "cognito-idp:ListResourceServers"
          Resource: "*"
        - Effect: "Allow"
          Action:
            - "secretsmanager:GetSecretValue"
          Resource: "*"


layers:
  shared:
    path: src/nodejs
    name: learnflow-pro-shared
    description: Shared services layer for LearnFlow Pro
    compatibleRuntimes:
      - nodejs18.x
    retain: false

plugins:
  - serverless-dotenv-plugin
  - serverless-finch
  - serverless-dynamodb
  - serverless-esbuild
  - serverless-offline

package:
  individually: true
  excludeDevDependencies: true
  include:
    - src/**
    - src/nodejs/node_modules/services/*
    - src/nodejs/node_modules/services/**/*

resources:
  Resources:
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: learnflow-pro-userpool
        MfaConfiguration: OFF
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: true
            RequireNumbers: true
            RequireSymbols: false
            RequireUppercase: true
    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: learnflow-pro-userpool-client
        GenerateSecret: False
        UserPoolId:
          Ref: CognitoUserPool
    CognitoIdentityPool:
      Type: AWS::Cognito::IdentityPool
      Properties:
        IdentityPoolName: learnflow-pro-identitypool
        AllowUnauthenticatedIdentities: false
        CognitoIdentityProviders:
          - ClientId:
              Ref: CognitoUserPoolClient
            ProviderName:
              Fn::GetAtt:
                - CognitoUserPool
                - ProviderName
    CognitoIdentityPoolRoles:
      Type: AWS::Cognito::IdentityPoolRoleAttachment
      Properties:
        IdentityPoolId:
          Ref: CognitoIdentityPool
        Roles:
          authenticated:
            Fn::GetAtt:
              - CognitoAuthRole
              - Arn
    CognitoAuthRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Federated: cognito-identity.amazonaws.com
              Action:
                - sts:AssumeRoleWithWebIdentity
              Condition:
                StringEquals:
                  "cognito-identity.amazonaws.com:aud":
                    Ref: CognitoIdentityPool
                ForAnyValue:StringLike:
                  "cognito-identity.amazonaws.com:amr": authenticated
    LambdaExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service: lambda.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: LambdaCloudWatchAccessPolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: "arn:aws:logs:*:*:*"
    UserDataTable:
      Type: AWS::RDS::DBInstance
      Properties:
        DBName: learnflow_pro
        AllocatedStorage: 20
        DBInstanceClass: db.t3.micro
        Engine: MySQL
        EngineVersion: "5.7"
        MasterUsername: admin         # replace later
        MasterUserPassword: admin123  # replace later
        PubliclyAccessible: true
        StorageType: gp2
        MultiAZ: false
    SortingResultsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: learnflow-pro-sorting-results
        AttributeDefinitions:
          - AttributeName: sessionId
            AttributeType: N
        KeySchema:
          - AttributeName: sessionId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    ApiGatewayAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: learnflow-pro-authorizermethod.request.header.Authorization
        IdentitySource: method.request.header.Authorization
        RestApiId:
          Ref: ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - Fn::GetAtt:
              - CognitoUserPool
              - Arn

functions:
  # --- Auth --- #
  
  preSignUp:
    handler: src/handlers/Auth.preSignUpHandler
    events:
      - cognitoUserPool:
          pool: ${self:custom.userPoolName}
          trigger: PreSignUp
          existing: true

  getUserMembership:
    handler: src/handlers/Auth.getUserMembershipHandler
    layers:
      - !Ref SharedLambdaLayer
    events:
      - http:
          path: /api/user/membership
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  createFreeMembership:
    handler: src/handlers/Auth.createFreeMembershipHandler
    layers:
      - !Ref SharedLambdaLayer
    events:
      - http:
          path: /api/user/membership/free
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  updateMembership:
    handler: src/handlers/Auth.updateMembershipHandler
    layers:
      - !Ref SharedLambdaLayer
    events:
      - http:
          path: /api/user/membership
          method: put
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  # --- Checkout --- #

  createCheckoutSession:
    handler: src/handlers/Checkout.createCheckoutSessionHandler
    layers:
      - !Ref SharedLambdaLayer
    events:
      - http:
          path: /api/create-checkout-session
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  stripeWebhooks:
    handler: src/handlers/Checkout.stripeWebhooksHandler
    layers:
      - !Ref SharedLambdaLayer
    events:
      - http:
          path: /api/stripe/webhooks
          method: post
          cors: true

  # --- Stats --- #

  getNumberOfArticlesSortedForDate:
    handler: src/handlers/Stats.getNumberOfArticlesSortedForDateHandler
    layers:
      - !Ref SharedLambdaLayer
    events:
      - http:
          path: /api/stats/articles/sorted
          method: get
          cors: true
          request:
            parameters:
              querystrings:
                date: true

  # --- Recommendations --- #

  getRecommendations:
    handler: src/handlers/Recommendations.getRecommendationsHandler
    layers:
      - !Ref SharedLambdaLayer
    events:
      - http:
          path: /api/recommendations
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  
  generateTopicRecommendations:
    handler: src/handlers/Recommendations.generateTopicRecommendationsHandler
    layers:
      - !Ref SharedLambdaLayer
    events:
      - http:
          path: /api/recommendations/topics
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  
  # --- Learning Sessions --- #

  createLearningSession:
    handler: src/handlers/Sessions.createSessionHandler
    layers:
      - !Ref SharedLambdaLayer
    events:
      - http:
          path: /api/sessions
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
            claims:
              - email
              - sub

  createArticleForLearningSession:
    handler: src/handlers/Articles.createArticleHandler
    layers:
      - !Ref SharedLambdaLayer
    events:
      - http:
          path: /api/articles
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
            claims:
              - email
              - sub

  getLearningSession:
    handler: src/handlers/Sessions.getSessionHandler
    layers:
      - !Ref SharedLambdaLayer
    events:
      - http:
          path: /api/sessions
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
            claims:
              - email
              - sub
  
  getUserLearningSessions:
    handler: src/handlers/Sessions.getUserSessionsHandler
    layers:
      - !Ref SharedLambdaLayer
    events:
      - http:
          path: /api/user/sessions
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
            claims:
              - email
              - sub
  
  getArticlesForLearningSession:
    handler: src/handlers/Articles.getArticlesHandler
    layers:
      - !Ref SharedLambdaLayer
    events:
      - http:
          path: /api/articles
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
            claims:
              - email
              - sub
  
  # --- Notes --- #

  getNotesForLearningSession:
    handler: src/handlers/Sessions.getNotesForLearningSessionHandler
    layers:
      - !Ref SharedLambdaLayer
    events:
      - http:
          path: /api/sessions/notes
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  getNotesForArticle:
    handler: src/handlers/Articles.getNotesForArticleHandler
    layers:
      - !Ref SharedLambdaLayer
    events:
      - http:
          path: /api/articles/notes
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  
  # --- Article Sorting --- #

  invokeSortingArticles:
    handler: src/handlers/Articles.invokeSortingArticlesHandler
    layers:
      - !Ref SharedLambdaLayer
    events:
      - http:
          path: /api/sessions/sort
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
            claims:
              - email
              - sub
  
  sortArticlesProcessor:
    handler: src/handlers/Articles.sortArticlesHandler
    timeout: 180
    layers:
      - !Ref SharedLambdaLayer
  
  pollForSortedArticles:
    handler: src/handlers/Articles.pollForSortedArticlesHandler
    layers:
      - !Ref SharedLambdaLayer
    events:
      - http:
          path: /api/sessions/sort
          method: get
          cors: true
          request:
            parameters:
              querystrings:
                sessionId: true
  
  # --- Generators --- #

  generateNotesForArticle:
    handler: src/handlers/Articles.generateNotesHandler
    layers:
      - !Ref SharedLambdaLayer
    events:
      - http:
          path: /api/articles/notes
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  
  generateSummaryForArticle:
    handler: src/handlers/Articles.generateSummaryHandler
    layers:
      - !Ref SharedLambdaLayer
    events:
      - http:
          path: /api/articles/summary
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  
  # --- Goals --- #

  createGoal:
    handler: src/handlers/Goals.createGoalHandler
    layers:
      - !Ref SharedLambdaLayer
    events:
      - http:
          path: /api/goals
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
            claims:
              - email
              - sub

  getGoals:
    handler: src/handlers/Goals.getGoalsHandler
    layers:
      - !Ref SharedLambdaLayer
    events:
      - http:
          path: /api/goals
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
            claims:
              - email
              - sub
  
  updateGoal:
    handler: src/handlers/Goals.updateGoalHandler
    layers:
      - !Ref SharedLambdaLayer
    events:
      - http:
          path: /api/goals
          method: put
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  
  deleteGoal:
    handler: src/handlers/Goals.deleteGoalHandler
    layers:
      - !Ref SharedLambdaLayer
    events:
      - http:
          path: /api/goals
          method: delete
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
            claims:
              - email
              - sub
  
  # --- Knowledge Bases --- #
  
  createKnowledgeBase:
    handler: src/handlers/KnowledgeBases.createKnowledgeBaseHandler
    layers:
      - !Ref SharedLambdaLayer
    events:
      - http:
          path: /api/knowledge-bases
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  
  createKnowledgeBaseEntry:
    handler: src/handlers/KnowledgeBases.createKnowledgeBaseEntryHandler
    layers:
      - !Ref SharedLambdaLayer
    events:
      - http:
          path: /api/knowledge-bases/entries
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  getUserKnowledgeBases:
    handler: src/handlers/KnowledgeBases.getUserKnowledgeBasesHandler
    layers:
      - !Ref SharedLambdaLayer
    events:
      - http:
          path: /api/user/knowledge-bases
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  
  getKnowledgeBase:
    handler: src/handlers/KnowledgeBases.getKnowledgeBaseHandler
    layers:
      - !Ref SharedLambdaLayer
    events:
      - http:
          path: /api/knowledge-bases
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  
  getArticlesForKnowledgeBase:
    handler: src/handlers/KnowledgeBases.getArticlesForKnowledgeBaseHandler
    layers:
      - !Ref SharedLambdaLayer
    events:
      - http:
          path: /api/knowledge-bases/articles
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  

useDotenv: true
custom:
  userPoolName: learnflow-pro-userpool
  esbuild:
    exclude: []
  client:
    bucketName: turbolearnai.com
    distributionFolder: build
    indexDocument: index.html
    errorDocument: index.html
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      migrate: true
    migration:
      dir: 'migrations'
  dotenv:
    include:
      - REACT_APP_IDENTITY_POOL_ID
      - REACT_APP_USER_POOL_REGION
      - REACT_APP_USER_POOL_ID
      - REACT_APP_USER_POOL_CLIENT_ID
      - REACT_APP_API_BASE_URL
      - REACT_APP_ALLOWED_ORIGINS
      - REACT_APP_DB_HOST
      - REACT_APP_DB_PORT
      - REACT_APP_DB_NAME
      - REACT_APP_DB_USERNAME
      - REACT_APP_DB_PASSWORD
      - REACT_APP_STRIPE_PUBLISHABLE_KEY
      - REACT_APP_STRIPE_SECRET_KEY