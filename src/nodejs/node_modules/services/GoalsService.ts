import { DataSource } from "typeorm";

// Database
import { createDataSource } from "src/utils/database";
import { Goal } from "src/entity/Goal";

class GoalsService {

    private async initialize(source: DataSource): Promise<void> {
        if (!source.isInitialized) {
            await source.initialize();
        }
    }

    private async destroy(source: DataSource): Promise<void> {
        if (source.isInitialized) {
            await source.destroy();
        }
    }

    public async getGoalsForUser(userId: string): Promise<Goal[]> {
        const AppDataSource = await createDataSource();
        await this.initialize(AppDataSource);
        const goalRepository = AppDataSource.getRepository(Goal);
        let goals: Goal[] = [];
        try {
            goals = await goalRepository.findBy({ userId: userId });
            console.log("ðŸš€ ~ file: GoalsService.ts:26 ~ GoalsService ~ getGoalsForUser ~ goals:", goals)
        } catch (error) {
            console.log("Error getting goals: ", error);
        } finally {
            await this.destroy(AppDataSource);
            return goals;
        }
    }

    public async getGoal(userId: string, goalId: number): Promise<Goal> {
        const AppDataSource = await createDataSource();
        await this.initialize(AppDataSource);
        const goalRepository = AppDataSource.getRepository(Goal); 
        let goal: Goal | null = null;
        try {
            goal = await goalRepository.findOneBy({ userId: userId, id: goalId });
        } catch (error) {
            console.log("Error getting goal: ", error);
        } finally {
            await this.destroy(AppDataSource);
            if (!goal) {
                throw new Error('Goal not found.');
            }
            return goal;
        }
    }

    public async createGoal(goal: Goal): Promise<Goal> {
        const AppDataSource = await createDataSource();
        await this.initialize(AppDataSource);
        const goalRepository = AppDataSource.getRepository(Goal);
        try {
            goal = await goalRepository.save(goal);
        } catch (error) {
            console.log("Error creating goal: ", error);
        } finally {
            await this.destroy(AppDataSource);
            return goal;
        }
    }

    public async updateGoal(goal: Goal): Promise<Goal> {
        const AppDataSource = await createDataSource();
        await this.initialize(AppDataSource);
        const goalRepository = AppDataSource.getRepository(Goal);

        let existingGoal: Goal | null = null;
        let updatedGoal: Goal | null = null;
        let goalToReturn: Goal | null = null;

        try {
            existingGoal = await goalRepository.findOneBy({ id: goal.id });
            if (!existingGoal) {
                throw new Error('Goal not found.');
            }

            existingGoal.goal = goal.goal;
            updatedGoal = await goalRepository.save(existingGoal);
            goalToReturn = updatedGoal;
        } catch (error) {
            console.log("Error updating goal: ", error);
            goalToReturn = goal;
        } finally {
            await this.destroy(AppDataSource);
            if (!goalToReturn) {
                throw new Error('Goal not found.');
            }
            
            return goalToReturn;
        }
    }

    public async deleteGoal(goalId: number): Promise<void> {
        const AppDataSource = await createDataSource();
        await this.initialize(AppDataSource);
        const goalRepository = AppDataSource.getRepository(Goal);
        try {
            await goalRepository.delete(goalId);
        } catch (error) {
            console.log("Error deleting goal: ", error);
        } finally {
            await this.destroy(AppDataSource);
        }
    }

}

export default GoalsService;