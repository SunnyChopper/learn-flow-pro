import { DataSource } from "typeorm";

// Database
import { KnowledgeBaseEntry } from "src/entity/KnowledgeBaseEntry";
import { KnowledgeBase } from "src/entity/KnowledgeBase";
import { createDataSource } from "src/utils/database";
import { Article } from "src/entity/Article";

class KnowledgeBaseService {

    private async initializeDataSource(source: DataSource) {
        if (!source.isInitialized) {
            await source.initialize();
        }
    }

    private async destroyDataSource(source: DataSource) {
        if (source.isInitialized) {
            await source.destroy();
        }
    }

    public async getKnowledgeBasesForUser(userId: string): Promise<KnowledgeBase[]> {
        const AppDataSource = await createDataSource();
        await this.initializeDataSource(AppDataSource);
        const knowledgeBaseRepository = AppDataSource.getRepository(KnowledgeBase);
        const knowledgeBases: KnowledgeBase[] = await knowledgeBaseRepository.findBy({ userId: userId });
        await this.destroyDataSource(AppDataSource);
        return knowledgeBases;
    }

    public async getKnowledgeBase(userId: string, knowledgeBaseId: number): Promise<KnowledgeBase> {
        const AppDataSource = await createDataSource();
        await this.initializeDataSource(AppDataSource);
        const knowledgeBaseRepository = AppDataSource.getRepository(KnowledgeBase);
        const knowledgeBase: KnowledgeBase | null = await knowledgeBaseRepository.findOneBy({ userId: userId, id: knowledgeBaseId });
        if (!knowledgeBase) {
            throw new Error('KnowledgeBase not found.');
        }
        await this.destroyDataSource(AppDataSource);
        return knowledgeBase;
    }

    public async getArticlesForKnowledgeBase(knowledgeBaseId: number): Promise<Article[]> {
        const AppDataSource = await createDataSource();
        await this.initializeDataSource(AppDataSource);
        const knowledgeBaseEntryRepository = AppDataSource.getRepository(KnowledgeBaseEntry);
        const knowledgeBaseEntries: KnowledgeBaseEntry[] = await knowledgeBaseEntryRepository.findBy({ knowledgeBaseId: knowledgeBaseId });
        const articleIds: number[] = knowledgeBaseEntries.map(knowledgeBaseEntry => knowledgeBaseEntry.articleId);
        const articleRepository = AppDataSource.getRepository(Article);
        if (articleIds.length === 0) {
            return [];
        }

        const query: string = articleRepository.createQueryBuilder().select()
            .where(`id IN (${articleIds.length > 0 ? articleIds.join(',') : '[]'})`).getQuery();
        console.log("ðŸš€ ~ file: KnowledgeBaseService.ts:49 ~ KnowledgeBaseService ~ getArticlesForKnowledgeBase ~ query:", query)
        const articles: any[] = await articleRepository.createQueryBuilder().select()
            .where(`id IN (${articleIds.length > 0 ? articleIds.join(',') : '[]'})`).execute();
        console.log("ðŸš€ ~ file: KnowledgeBaseService.ts:49 ~ KnowledgeBaseService ~ getArticlesForKnowledgeBase ~ articles:", articles)
        await this.destroyDataSource(AppDataSource);
        // Remove the "Article_" prefix from the keys
        return articles.map(article => {
            const newArticle: Article = {
                id: article.Article_id,
                userId: article.Article_userId,
                sessionId: article.Article_sessionId,
                title: article.Article_title,
                url: article.Article_url,
                summary: article.Article_summary,
                authors: article.Article_authors,
                createdAt: article.Article_createdAt
            };
            return newArticle;
        });
    }

    public async createKnowledgeBase(knowledgeBase: KnowledgeBase): Promise<KnowledgeBase> {
        const AppDataSource = await createDataSource();
        await this.initializeDataSource(AppDataSource);
        const knowledgeBaseRepository = AppDataSource.getRepository(KnowledgeBase);
        let newKnowledgeBase: KnowledgeBase | undefined;
        try {
            newKnowledgeBase = await knowledgeBaseRepository.save(knowledgeBase);
        } catch (error) {
            console.log("Error creating knowledgeBase: ", error);
        } finally {
            await this.destroyDataSource(AppDataSource);
            return newKnowledgeBase || knowledgeBase;
        }
    }

    public async createKnowledgeBaseEntry(knowledgeBaseEntry: KnowledgeBaseEntry): Promise<KnowledgeBaseEntry> {
        const AppDataSource = await createDataSource();
        await this.initializeDataSource(AppDataSource);
        const knowledgeBaseEntryRepository = AppDataSource.getRepository(KnowledgeBaseEntry);
        let newKnowledgeBaseEntry: KnowledgeBaseEntry | undefined;
        try {
            newKnowledgeBaseEntry = await knowledgeBaseEntryRepository.save(knowledgeBaseEntry);
        } catch (error) {
            console.log("Error creating knowledgeBaseEntry: ", error);
        } finally {
            await this.destroyDataSource(AppDataSource);
            return newKnowledgeBaseEntry || knowledgeBaseEntry;
        }
    }

}

export default KnowledgeBaseService;