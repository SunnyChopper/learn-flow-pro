import { DataSource } from "typeorm";

// Database
import { createDataSource } from "src/utils/database";
import { ArticleCache } from "src/entity/ArticleCache";
import { Article } from "src/entity/Article";

// Utils
import { getSecret } from "src/utils/secrets";

class MediumService {
    public static readonly API_URL: string = 'https://medium2.p.rapidapi.com';

    public static getMediumArticleId = (url: string): string => {
        const unsanitizedArticlePath: string = url.split("/").pop() || "";
        const sanitizedArticlePath: string = unsanitizedArticlePath.split("?")[0];
        const articleMediumId: string = sanitizedArticlePath.split("-").pop() || "";
        if (articleMediumId.length === 0) {
            throw new Error(`Failed to get the article with URL ${url}. Error: Invalid article Medium ID.`);
        }
        return articleMediumId;
    }

    private async initialize(source: DataSource): Promise<void> {
        if (!source.isInitialized) {
            await source.initialize();
        }
    }

    private async destroy(source: DataSource): Promise<void> {
        if (source.isInitialized) {
            await source.destroy();
        }
    }

    public getMarkdownForArticle = async (article: Article): Promise<string> => {
        const articleMediumId: string = MediumService.getMediumArticleId(article.url);
        let markdown: string | null = await this.retrieveMarkdownFromCache(article.id || -1);
        if (!markdown) {
            try {
                markdown = await this.fetchMarkdownFromVendorAPI(articleMediumId);
            } catch (error) {
                console.log("Error fetching markdown from vendor API: ", error);
                throw error;
            }

            try {
                await this.storeMarkdownInCache(article, markdown);
            } catch (error) {
                console.log("Error storing markdown in cache: ", error);
                return markdown;
            }
        }
        return markdown;
    }

    public getTitleForArticle = async (article: Article): Promise<string> => {
        const articleMediumId: string = MediumService.getMediumArticleId(article.url);

        let mediumApiKey: string | null = null;
        try {
            mediumApiKey = await getSecret("turbolearnai/medium-api");
        } catch (error) {
            console.log("Error fetching from Secrets Manager: ", error);
            throw error;
        }

        let response: Response;
        try {
            response = await fetch(`${MediumService.API_URL}/article/${articleMediumId}`, {
                method: 'GET',
                headers: {
                    'X-RAPIDAPI-KEY': mediumApiKey || '',
                    'X-RAPIDAPI-HOST': 'medium2.p.rapidapi.com'
                }
            });
        } catch (error) {
            console.log("Error fetching title from vendor API: ", error);
            throw error;
        }

        if (!response.ok) {
            throw new Error(`Failed to get the article with ID ${articleMediumId}. Error: ${response.status}`);
        }

        const responseJson = await response.json();
        return responseJson.title || "";
    }

    public getAuthorForArticle = async (article: Article): Promise<string> => {
        const articleMediumId: string = MediumService.getMediumArticleId(article.url);

        let mediumApiKey: string | null = null;
        try {
            mediumApiKey = await getSecret("turbolearnai/medium-api");
        } catch (error) {
            console.log("Error fetching from Secrets Manager: ", error);
            throw error;
        }

        let response: Response;
        try {
            response = await fetch(`${MediumService.API_URL}/article/${articleMediumId}`, {
                method: 'GET',
                headers: {
                    'X-RAPIDAPI-KEY': mediumApiKey || '',
                    'X-RAPIDAPI-HOST': 'medium2.p.rapidapi.com'
                }
            });
        } catch (error) {
            console.log("Error fetching author from vendor API: ", error);
            throw error;
        }

        if (!response.ok) {
            throw new Error(`Failed to get the article with ID ${articleMediumId}. Error: ${response.status}`);
        }

        const responseJson = await response.json();
        const authorUserId: string = responseJson.author || "";
        if (authorUserId.length === 0) {
            throw new Error(`Failed to get the article with ID ${articleMediumId}. Error: Invalid author user ID.`);
        }

        let userResponse: Response;
        try {
            userResponse = await fetch(`${MediumService.API_URL}/user/${authorUserId}`, {
                method: 'GET',
                headers: {
                    'X-RAPIDAPI-KEY': mediumApiKey || '',
                    'X-RAPIDAPI-HOST': 'medium2.p.rapidapi.com'
                }
            });
        } catch (error) {
            console.log("Error fetching user from vendor API: ", error);
            throw error;
        }

        if (!userResponse.ok) {
            throw new Error(`Failed to get the user with ID ${authorUserId}. Error: ${userResponse.status}`);
        }

        const userResponseJson = await userResponse.json();
        return userResponseJson.fullname || "";
    }

    private fetchMarkdownFromVendorAPI = async (articleMediumId: string): Promise<string> => {
        let mediumApiKey: string | null = null;
        try {
            mediumApiKey = await getSecret("turbolearnai/medium-api");
        } catch (error) {
            console.log("Error fetching from Secrets Manager: ", error);
            throw error;
        }

        const response = await fetch(`${MediumService.API_URL}/article/${articleMediumId}/markdown`, {
            method: 'GET',
            headers: {
                'X-RAPIDAPI-KEY': mediumApiKey || '',
                'X-RAPIDAPI-HOST': 'medium2.p.rapidapi.com'
            }
        });

        if (!response.ok) {
            throw new Error(`Failed to get the article with ID ${articleMediumId}. Error: ${response.status}`);
        }

        const responseJson = await response.json() as { markdown: string };
        return responseJson.markdown;
    }

    private retrieveMarkdownFromCache = async (articleId: number): Promise<string | null> => {
        const AppDataSource = await createDataSource();
        await this.initialize(AppDataSource);
        const articleCacheRepository = AppDataSource.getRepository(ArticleCache);
        const articleCache: ArticleCache | null = await articleCacheRepository.findOneBy({ articleId: articleId });
        await this.destroy(AppDataSource);
        return (articleCache && articleCache.markdown) ? articleCache.markdown : null;
    }

    private storeMarkdownInCache = async (article: Article, markdown: string): Promise<Number> => {
        const articleMediumId: string = MediumService.getMediumArticleId(article.url);
        const AppDataSource = await createDataSource();
        await this.initialize(AppDataSource);
        const articleCacheRepository = AppDataSource.getRepository(ArticleCache);
        let articleCache: ArticleCache = new ArticleCache();
        articleCache.articleId = article.id || -1;
        articleCache.articleMediumId = articleMediumId;
        articleCache.markdown = markdown;
        articleCache = await articleCacheRepository.save(articleCache);
        await this.destroy(AppDataSource);
        
        if (!articleCache.id) {
            throw new Error(`Failed to store the article with ID ${articleMediumId} in the cache.`);
        }

        return articleCache.id;
    }
    
}

export default MediumService;