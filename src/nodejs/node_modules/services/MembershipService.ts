// System
import { DataSource } from "typeorm";

// Database
import { createDataSource } from "src/utils/database";
import { Membership } from "src/entity/Membership";

class MembershipService {
    private userId: string;

    public constructor(userId: string) {
        this.userId = userId;
    }

    private async establishConnection(source: DataSource): Promise<void> {
        if (source.isInitialized === false) { await source.initialize(); }
    }

    private async closeConnection(source: DataSource): Promise<void> {
        if (source.isInitialized === true) { await source.destroy(); }
    }

    public async getMembership(): Promise<Membership | null> {
        const AppDataSource = await createDataSource();
        await this.establishConnection(AppDataSource);
        const membershipRepository = AppDataSource.getRepository(Membership);
        const membership = await membershipRepository.findOne({ where: { userId: this.userId } });
        await this.closeConnection(AppDataSource);
        return membership;
    }

    public async createFreeMembership(): Promise<Membership> {
        const AppDataSource = await createDataSource();
        await this.establishConnection(AppDataSource);
        const membershipRepository = AppDataSource.getRepository(Membership);
        const membership = await membershipRepository.save({
            userId: this.userId,
            membershipLevel: 'Free'
        });
        await this.closeConnection(AppDataSource);
        return membership;
    }

    public async updateMembership(membership: Membership): Promise<Membership> {
        const AppDataSource = await createDataSource();
        await this.establishConnection(AppDataSource);
        const membershipRepository = AppDataSource.getRepository(Membership);
        const updatedMembership = await membershipRepository.save(membership);
        await this.closeConnection(AppDataSource);
        return updatedMembership;
    }
}

export default MembershipService;