// Langchain
import { SystemMessage, HumanMessage } from 'langchain/schema';
import {
    ChatPromptTemplate,
    SystemMessagePromptTemplate,
    HumanMessagePromptTemplate
} from "langchain/prompts";

export interface Prompts {
    systemMessage: SystemMessage | null;
    humanMessage: HumanMessage | null;
    finalPrompt: string;
}

export const  SORT_ARTICLES: string = 'sortArticles';
export const SUMMARIZE_ARTICLE: string = 'summarizeArticle';
export const NOTES_FOR_ARTICLE: string = 'notesForArticle';
export const RECOMMEND_TOPICS: string = 'recommendTopics';

export default class PromptsService {
    public static readonly rootDirectory: string = 'prompts';

    public static async loadChatPrompt(key: string): Promise<ChatPromptTemplate> {
        if (key === null || key === undefined) {
            throw new Error('Key is null or undefined');
        }

        let systemMessageTemplate: string;
        let humanMessageTemplate: string;
        switch (key) {
            case SORT_ARTICLES:
                systemMessageTemplate = `You are an AI assistant tasked with organizing a list of articles for a user based on their learning goals.
                
                Filter out articles that are not relevant to the following learning goals. Only keep articles that contribute to achieving these goals in some way. Use your creative thinking to determine how each article contributes to the user's learning goals and note it down in the "reason" field.
                
                Sort the filtered list of articles. Start with the article that most aligns with the user's primary learning goal and proceed in order of relevance. The last article should be the one that least aligns with the user's learning goals but is still relevant.
                
                ## JSON Format for Response
                Replacing "%" with appropriate curly braces.
                
                %
                    "sortedArticles": [%
                        "id": <article id>,
                        "title": "<full title of filtered article>",
                        "sort": <sort order considering total number of filtered articles>,
                        "reason": "<detailed reasoning for the sort order>",
                        "informationFlow": "<how the article fits into the adjacent articles and flow of information>"
                    %, ...]
                %
                
                Ensure that the response is in the specified JSON format.`;

                humanMessageTemplate = `Articles:
                {articles}
                
                Learning Goals:
                {goals}
                
                Please response with the sorted articles in the correct JSON format with 'summary' as the key being used.`;
                break;
            case SUMMARIZE_ARTICLE:
                systemMessageTemplate = `Your task is to summarize the following article given by the user. Create a 100-word summary that captures the key themes and points of the article. The summary must be concise and informative, accurately reflecting the main ideas of the article while adhering to the word limit.
                
                ## JSON Format for Response
                Substitute the "%" with the respective curly braces.
                
                %
                    "summary": "<summarized version of article with a max of 100 words>"
                %
                
                Ensure that the summary is relevant and focused, providing a clear and coherent overview of the article's content.`;

                humanMessageTemplate = `Title: {title}
                Content: {content}
                
                Please response with the summary of the article in the correct JSON format.`;
                break;
            case NOTES_FOR_ARTICLE:
                systemMessageTemplate = `You are an LLM agent that is part of a larger software application. You are responsible for performing a specific task within this application. This larger software application helps users intelligently take notes on the articles they are reading with respect to the user's learning goals. The "intelligence" of the application comes from the LLM agents that are part of the application. Each LLM agent is responsible for a specific task.
                
                Your specific task is the following: Take an article and generate notes for it that are relevant to the user's learning goals.
                
                ## User Input
                The following are the fields that you will receive from the user (which may be in JSON format):
                - The article's title
                - The article's content
                - The user's learning goals
                
                ## Response Output
                You will respond to the user with the following JSON structure. Make sure to replace any % with the corresponding curly brace.
                
                %
                    "notes": [%
                        "title": "<title of note>",
                        "content": "<content of note>"
                    %, %
                        "title": "<title of note>",
                        "content": "<content of note>"
                    %, ...]
                %`;

                humanMessageTemplate = `I have an article that I want to take notes on.

                Title: {title}
                Content: {content}
                Learning Goals: {goals}

                Please response with the notes for the article in the correct JSON format.`;
                break;
            case RECOMMEND_TOPICS:
                systemMessageTemplate = `Please suggest 15 specific search queries for topics on Medium that are relevant to the user's interests and goals. The recommendations should expand the user's understanding in areas related to the articles they have already read and assist in reaching their objectives.\n\nThe topics should be formatted in JSON as follows. Make sure to replace any % with the corresponding curly brace:\n\n%\n\t"topics": [\n\t\t"<recommended topic 1>",\n\t\t"<recommended topic 2>",\n\t\t...,\n\t\t"<recommended topic 15>"\n\t]\n%\n\nNote: The recommendations should be diverse and cover different aspects related to the user's goals and previous readings.`;

                humanMessageTemplate = `I have recently read the following articles:\n{articles}\n\nMy current goals are: \n{goals}\n\n Based on these, I am seeking recommendations for new topics to explore on Medium that will help me advance my knowledge and achieve my goals. Please response with the recommended topics in the correct JSON format.`;

                break;
            default:
                throw new Error('Key not found');
        }

        const systemMessagePrompt: SystemMessagePromptTemplate = SystemMessagePromptTemplate.fromTemplate(systemMessageTemplate);
        const humanMessagePrompt: HumanMessagePromptTemplate = HumanMessagePromptTemplate.fromTemplate(humanMessageTemplate);
        const chatPromptTemplate: ChatPromptTemplate = ChatPromptTemplate.fromPromptMessages([systemMessagePrompt, humanMessagePrompt]);

        return chatPromptTemplate;
    }
    

}