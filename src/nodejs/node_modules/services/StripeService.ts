// System
import Stripe from 'stripe';

// Database
import { Membership } from 'src/entity/Membership';

// Services
import MembershipService from '/opt/services/MembershipService';

// Utils
import { initializeStripe } from 'src/utils/stripe';


class StripeService {
    private stripe: Stripe;

    private async init(): Promise<void> {
        try {
            this.stripe = await initializeStripe();
        } catch (error) {
            console.log('Error initializing Stripe', error);
            throw error;
        }
    }

    public async createCheckoutSession(userId: string, priceId: string): Promise<Stripe.Checkout.Session> {
        await this.init();

        const successUrl = `${process.env.REACT_APP_API_BASE_URL}/subscriptions/success`;
        const cancelUrl = `${process.env.REACT_APP_API_BASE_URL}/subscriptions/cancel`;

        const session = await this.stripe.checkout.sessions.create({
            payment_method_types: ['card'],
            line_items: [{ price: priceId, quantity: 1 }],
            mode: 'subscription',
            success_url: successUrl,
            cancel_url: cancelUrl,
            metadata: { userId: userId }
        });

        return session;
    }

    public async handleWebhookEvent(event: Stripe.Event): Promise<void> {
        await this.init();

        if (event.type === 'checkout.session.completed') {
            // Get user ID from the metadata
            const userId = event.data.object.metadata?.userId;
            if (userId === undefined || userId === null) { throw new Error('User ID is not defined.'); }

            // Get the customer ID from the checkout session
            const customerId = event.data.object.customer;
            console.log("ðŸš€ ~ file: StripeService.ts:49 ~ StripeService ~ handleWebhookEvent ~  customerId :",  customerId )

            // Get the price object used by utilizing the subscription ID
            const subscriptionId = event.data.object.subscription;
            console.log("ðŸš€ ~ file: StripeService.ts:52 ~ StripeService ~ handleWebhookEvent ~ subscriptionId:", subscriptionId)
            if (subscriptionId === undefined || subscriptionId === null) { throw new Error('Subscription ID is not defined.'); }

            if (typeof subscriptionId === 'string') {
                const subscription = await this.stripe.subscriptions.retrieve(subscriptionId);
                console.log("ðŸš€ ~ file: StripeService.ts:65 ~ StripeService ~ handleWebhookEvent ~ subscription:", subscription)
                const priceId = subscription.items.data[0].price.id;
                console.log("ðŸš€ ~ file: StripeService.ts:59 ~ StripeService ~ handleWebhookEvent ~ priceId:", priceId);

                if (priceId === 'price_1O5MZFJ8waV4l4Wbk3cSsL65') {
                    console.log('Successfully registered to the premium membership. Need to update the user membership in the database.');
                    
                    const membershipService = new MembershipService(userId);
                    const existingMembership = await membershipService.getMembership();
                    if (existingMembership === null) { throw new Error('User membership is not defined.'); }

                    // TODO: Update the rest of the membership fields
                    const updatedMembership = {
                        ...existingMembership,
                        membershipLevel: 'Premium',
                        stripeCustomerId: customerId,
                        stripeSubscriptionId: subscriptionId
                    } as Membership;

                    try {
                        await membershipService.updateMembership(updatedMembership);
                    } catch (error) {
                        console.log('Error updating user membership', error);
                        throw error;
                    }
                }
            }
            
            console.log("ðŸš€ ~ file: StripeService.ts:41 ~ StripeService ~ handleWebhookEvent ~ event:", event)
        }
    }
}

export default StripeService;